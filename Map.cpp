#include "Map.h"

Map::Map()
{
	//初始化
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			MapInf[i][j].color = RGB{ 255,255,255 };
			MapInf[i][j].Destination = { -1,-1 };
			MapInf[i][j].Number = 0;
			//MapInf[i][j].Road = {0,0,0,0,0,0,0,0,0,0,0,0};
		}
	}
	int numtemp[20][20] = {	
							{1,1,1,1,1,1,3,1,3,1,1,1,4,0,1,1,1,1,1,1},
							{1,1,1,1,1,3,0,3,0,2,2,10,0,0,1,1,1,1,1,1},
							{1,1,1,1,1,3,0,10,0,0,0,1,0,4,1,4,0,1,1,1},
							{1,1,1,2,0,0,3,5,0,0,0,0,0,5,1,5,0,1,1,1},
							{1,1,1,2,0,0,1,2,1,0,5,0,0,0,0,0,4,1,1,1},
							{1,1,10,0,0,0,0,2,2,2,1,0,0,0,9,1,1,1,5,0},
							{4,11,1,0,0,11,10,9,0,10,0,0,0,0,0,0,2,2,3,0},
							{0,0,1,0,0,2,2,9,0,5,0,0,0,10,0,0,2,2,0,0},
							{0,0,0,0,0,0,0,0,0,0,5,0,1,9,0,0,10,1,3,5},
							{4,9,0,0,0,0,9,0,0,0,2,2,5,0,1,0,0,2,2,1},
							{1,0,0,4,1,1,1,3,0,3,10,5,0,0,2,2,0,2,2,1},
							{1,4,10,0,0,0,0,0,0,0,0,11,3,0,10,0,0,11,0,4},
							{1,1,8,0,0,0,0,0,0,8,1,0,0,3,9,0,0,0,0,0},
							{1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,2,0,10,0},
							{1,1,1,1,1,1,1,1,1,0,11,0,0,0,0,0,2,0,0,4},
							{1,1,1,1,1,1,3,0,1,0,8,0,1,0,0,1,0,0,0,1},
							{1,1,1,1,1,1,3,3,1,4,0,0,9,0,1,0,0,0,0,7},
							{1,1,1,1,9,3,0,8,0,0,0,1,2,2,7,11,1,0,2,0},
							{1,1,1,1,0,0,0,0,0,0,0,9,2,2,0,0,0,0,2,0},
							{1,1,1,1,1,1,1,1,1,1,7,0,0,0,0,10,7,0,0,0},
						};
	int blacktmp[20][20] = {	
								0,0,0,0,0,0,3,0,3,0,0,1,4,0,0,0,0,0,0,0,
								0,0,0,0,0,3,0,3,0,2,2,0,0,0,0,0,0,0,0,0,
								0,0,0,0,1,0,0,0,0,0,0,1,0,4,0,4,0,0,0,0,
								0,0,0,2,0,0,0,5,0,0,0,0,0,0,1,0,0,0,0,0,
								0,0,1,2,0,0,1,0,0,0,5,0,0,0,0,0,4,0,0,0,
								0,1,0,0,0,0,0,0,2,2,0,0,0,0,0,1,0,0,5,0,
								4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,
								0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,5,
								4,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,
								0,0,0,4,1,1,1,3,0,3,0,0,0,0,0,0,0,0,2,0,
								0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
								0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
								0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,1,0,0,0,0,
								0,0,0,0,0,1,0,3,0,4,0,0,0,0,1,0,0,0,0,0,
								0,0,0,0,9,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0, 
							};
	int greentmp[20][20] = {	
								0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,
								0,0,0,0,0,3,0,10,0,0,0,0,0,0,0,0,0,0,0,0,
								0,0,0,0,0,0,3,0,0,0,0,0,0,5,0,5,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
								0,0,10,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,
								0,11,0,0,0,11,10,9,0,10,0,0,0,0,0,0,0,0,3,0,
								0,0,1,0,0,2,2,9,0,5,0,0,0,10,0,0,2,2,0,0,
								0,0,0,0,0,0,0,0,0,0,5,0,0,9,0,0,10,0,3,0,
								0,9,0,0,0,0,9,0,0,0,0,0,5,0,1,0,0,2,0,0,
								0,0,0,0,0,0,0,0,0,0,10,5,0,0,2,2,0,2,0,0,
								0,0,10,0,0,0,0,0,0,0,0,11,3,0,10,0,0,11,0,0,
								0,0,0,0,0,0,0,0,0,0,1,0,0,3,9,0,0,0,0,0,
								0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,10,0,
								0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,2,0,0,0,
								0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,
								0,0,0,0,0,0,3,0,0,0,0,0,9,0,0,0,0,0,0,7,
								0,0,0,0,0,3,0,8,0,0,0,1,0,0,7,11,1,0,2,0,
								0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,
								0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,10,7,0,0,0,
							};
	Focus.x = -1;
	Focus.y = -1;
	//存储地图信息

	//数字信息&
	//终点信息初始化
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			(MapInf[i][j]).Number = numtemp[i][j];
			if (numtemp[i][j] != 0)
			{
				MapInf[i][j].Destination.x = i;
				MapInf[i][j].Destination.y = j;
			}
			else
			{
				MapInf[i][j].Destination.x = -1;
				MapInf[i][j].Destination.y = -1;
			}
		}
	}
	//颜色信息
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			if (blacktmp[i][j] != 0)
			{
				(MapInf[i][j].color = RGB{ 0,0,0 });
			}
		}
	}
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			if (greentmp[i][j] != 0)
			{
				(MapInf[i][j].color = RGB{ 155,187,89 });
			}
		}
	}
	(MapInf[4][7].color = RGB{ 255,250,30 });
	(MapInf[5][7].color = RGB{ 255,250,30 });


}

Map::~Map()
{
}

void Map::Initial()
{
	//初始化
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			MapInf[i][j].color = RGB{ 255,255,255 };
			MapInf[i][j].Destination = { -1,-1 };
			MapInf[i][j].Number = 0;
			//MapInf[i][j].Road = {0,0,0,0,0,0,0,0,0,0,0,0};
		}
	}
	int numtemp[20][20] = {
		{ 1,1,1,1,1,1,3,1,3,1,1,1,4,0,1,1,1,1,1,1 },
		{ 1,1,1,1,1,3,0,3,0,2,2,10,0,0,1,1,1,1,1,1 },
		{ 1,1,1,1,1,3,0,10,0,0,0,1,0,4,1,4,0,1,1,1 },
		{ 1,1,1,2,0,0,3,5,0,0,0,0,0,5,1,5,0,1,1,1 },
		{ 1,1,1,2,0,0,1,2,1,0,5,0,0,0,0,0,4,1,1,1 },
		{ 1,1,10,0,0,0,0,2,2,2,1,0,0,0,9,1,1,1,5,0 },
		{ 4,11,1,0,0,11,10,9,0,10,0,0,0,0,0,0,2,2,3,0 },
		{ 0,0,1,0,0,2,2,9,0,5,0,0,0,10,0,0,2,2,0,0 },
		{ 0,0,0,0,0,0,0,0,0,0,5,0,1,9,0,0,10,1,3,5 },
		{ 4,9,0,0,0,0,9,0,0,0,2,2,5,0,1,0,0,2,2,1 },
		{ 1,0,0,4,1,1,1,3,0,3,10,5,0,0,2,2,0,2,2,1 },
		{ 1,4,10,0,0,0,0,0,0,0,0,11,3,0,10,0,0,11,0,4 },
		{ 1,1,8,0,0,0,0,0,0,8,1,0,0,3,9,0,0,0,0,0 },
		{ 1,1,1,1,1,1,1,1,1,4,0,0,0,0,0,0,2,0,10,0 },
		{ 1,1,1,1,1,1,1,1,1,0,11,0,0,0,0,0,2,0,0,4 },
		{ 1,1,1,1,1,1,3,0,1,0,8,0,1,0,0,1,0,0,0,1 },
		{ 1,1,1,1,1,1,3,3,1,4,0,0,9,0,1,0,0,0,0,7 },
		{ 1,1,1,1,9,3,0,8,0,0,0,1,2,2,7,11,1,0,2,0 },
		{ 1,1,1,1,0,0,0,0,0,0,0,9,2,2,0,0,0,0,2,0 },
		{ 1,1,1,1,1,1,1,1,1,1,7,0,0,0,0,10,7,0,0,0 },
	};
	int blacktmp[20][20] = {
		0,0,0,0,0,0,3,0,3,0,0,1,4,0,0,0,0,0,0,0,
		0,0,0,0,0,3,0,3,0,2,2,0,0,0,0,0,0,0,0,0,
		0,0,0,0,1,0,0,0,0,0,0,1,0,4,0,4,0,0,0,0,
		0,0,0,2,0,0,0,5,0,0,0,0,0,0,1,0,0,0,0,0,
		0,0,1,2,0,0,1,0,0,0,5,0,0,0,0,0,4,0,0,0,
		0,1,0,0,0,0,0,0,2,2,0,0,0,0,0,1,0,0,5,0,
		4,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,5,
		4,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,0,
		0,0,0,4,1,1,1,3,0,3,0,0,0,0,0,0,0,0,2,0,
		0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
		0,0,8,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,
		0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,1,0,0,0,0,
		0,0,0,0,0,1,0,3,0,4,0,0,0,0,1,0,0,0,0,0,
		0,0,0,0,9,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
	};
	int greentmp[20][20] = {
		0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0,
		0,0,0,0,0,3,0,10,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,0,0,0,0,3,0,0,0,0,0,0,5,0,5,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
		0,0,10,0,0,0,0,0,0,0,1,0,0,0,9,0,0,0,0,0,
		0,11,0,0,0,11,10,9,0,10,0,0,0,0,0,0,0,0,3,0,
		0,0,1,0,0,2,2,9,0,5,0,0,0,10,0,0,2,2,0,0,
		0,0,0,0,0,0,0,0,0,0,5,0,0,9,0,0,10,0,3,0,
		0,9,0,0,0,0,9,0,0,0,0,0,5,0,1,0,0,2,0,0,
		0,0,0,0,0,0,0,0,0,0,10,5,0,0,2,2,0,2,0,0,
		0,0,10,0,0,0,0,0,0,0,0,11,3,0,10,0,0,11,0,0,
		0,0,0,0,0,0,0,0,0,0,1,0,0,3,9,0,0,0,0,0,
		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,10,0,
		0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,2,0,0,0,
		0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,1,
		0,0,0,0,0,0,3,0,0,0,0,0,9,0,0,0,0,0,0,7,
		0,0,0,0,0,3,0,8,0,0,0,1,0,0,7,11,1,0,2,0,
		0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,0,
		0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,10,7,0,0,0,
	};
	Focus.x = -1;
	Focus.y = -1;
	//存储地图信息

	//数字信息&
	//终点信息初始化
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			(MapInf[i][j]).Number = numtemp[i][j];
			if (numtemp[i][j] != 0)
			{
				MapInf[i][j].Destination.x = i;
				MapInf[i][j].Destination.y = j;
			}
			else
			{
				MapInf[i][j].Destination.x = -1;
				MapInf[i][j].Destination.y = -1;
			}
		}
	}
	//颜色信息
	//黑色
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			if (blacktmp[i][j] != 0)
			{
				(MapInf[i][j].color = RGB{ 0,0,0 });
			}
		}
	}
	//绿色
	for (int i = 0; i <= 19; i++)
	{
		for (int j = 0; j <= 19; j++)
		{
			if (greentmp[i][j] != 0)
			{
				(MapInf[i][j].color = RGB{ 155,187,89 });
			}
		}
	}
	(MapInf[4][7].color = RGB{ 255,250,30 });
	(MapInf[5][7].color = RGB{ 255,250,30 });
}

int Map::DealChangeRoad(int i, int j)
{
	//是否聚焦
	if ((Focus.x == -1) && (Focus.y == -1)) return 0;
	else
	{
		//检查是否相邻
		int disi = (MapInf[Focus.x][Focus.y].Destination.x - i);
		int disj = (MapInf[Focus.x][Focus.y].Destination.y - j);
		if
			(((disi + disj == 1) || ((disi + disj) == -1)) && (disi <= 1) && (disi >= -1) && (disj <= 1) && (disj >= -1))
		{
			//是否撤销
			{
				int temp = 0;
				while (MapInf[Focus.x][Focus.y].Road[temp] != 0)
				{
					temp++;
					//超出范围
					if (temp >= 12) break;
				}
				temp--;
				if (temp == -1)
				{
					//do nothing
				}
				else
				{
					int lastx = MapInf[Focus.x][Focus.y].Destination.x;
					int lasty = MapInf[Focus.x][Focus.y].Destination.y;
					switch (MapInf[Focus.x][Focus.y].Road[temp])
					{
					case LEFT:
					{
						lasty++;
						break;
					}
					case UP:
					{
						lastx++;
						break;
					}
					case RIGHT:
					{
						lasty--;
						break;
					}
					case DOWN:
					{
						lastx--;
						break;
					}
					default:
					{
						//ERROR
					}
					}
					if ((i == lastx) && (j == lasty))
					{
						//撤回
						ResetDotNum(MapInf[Focus.x][Focus.y].Destination.x, MapInf[Focus.x][Focus.y].Destination.y);
						MapInf[Focus.x][Focus.y].Road[temp] = 0;
						MapInf[Focus.x][Focus.y].Destination.x = lastx;
						MapInf[Focus.x][Focus.y].Destination.y = lasty;
						return 0;
					}
				}
			}
			//是否到达终点
			{
				int temp = 0;
				while (MapInf[Focus.x][Focus.y].Road[temp] != 0)
				{
					temp++;
					//超出范围
					if (temp >= 12) return 0;
				}
				temp += 2;//总步数
				if ((temp == MapInf[Focus.x][Focus.y].Number) && (temp == MapInf[i][j].Number))//如果步数相同
				{
					//如果颜色相同
					if ((MapInf[Focus.x][Focus.y].color.r == MapInf[i][j].color.r) && (MapInf[Focus.x][Focus.y].color.g == MapInf[i][j].color.g) && (MapInf[Focus.x][Focus.y].color.b == MapInf[i][j].color.b))
					{
						int r;
						int g;
						int b;
						GetDotRGB(i, j, r, g, b);
						//设置起点数字
						MapInf[Focus.x][Focus.y].Number = 1;
						//设置路径数字
						temp -= 3;
						int roadi = Focus.x;
						int roadj = Focus.y;
						for (int t = 0; t <= temp; t++)
						{
							//移动与设置
							{
								switch (MapInf[Focus.x][Focus.y].Road[t])
								{
								case LEFT:
								{
									roadj--;
									break;
								}
								case UP:
								{
									roadi--;
									break;
								}
								case RIGHT:
								{
									roadj++;
									break;
								}
								case DOWN:
								{
									roadi++;
									break;
								}
								default:
								{
									//ERROR
								}
								}
								MapInf[roadi][roadj].Number = 1;
								MapInf[roadi][roadj].color = RGB{ short(r),short(g),short(b) };
							}
						}
						//设置终点数字
						MapInf[i][j].Number = 1;
						//失去焦点
						LoseFocus();
						return 1;
					}
				}
			}
			//未被占领 
			{
					if (MapInf[i][j].Number == 0)
					{
						int temp = 0;
						while (MapInf[Focus.x][Focus.y].Road[temp] != 0)
						{
							temp++;
							//超出范围
							if (temp >= 12) return 0;
						}
						//插入路径
						switch (disi)
						{
						case 1:
						{
							//UP
							MapInf[Focus.x][Focus.y].Road[temp] = UP;
							break;
						}
						case -1:
						{
							//DOWN
							MapInf[Focus.x][Focus.y].Road[temp] = DOWN;
							break;
						}
						default:
						{
							break;
						}
						}
						switch (disj)
						{
						case 1:
						{
							//LEFT
							MapInf[Focus.x][Focus.y].Road[temp] = LEFT;
							break;
						}
						case -1:
						{
							//RIGHT
							MapInf[Focus.x][Focus.y].Road[temp] = RIGHT;
							break;
						}
						default:
						{
							break;
						}
						}
						ChangeDes(i, j);
						//修改数字信息
						MapInf[i][j].Number = -1;
					}
					else return 0;
				}
		}
		else return 0;
	}
}

void Map::ChangeDes(int i, int j)
{
	{
		MapInf[Focus.x][Focus.y].Destination.x = i;
		MapInf[Focus.x][Focus.y].Destination.y = j;
	}
}

int Map::GetDotNum(int  i, int  j)
{
	int t;
	t = MapInf[i][j].Number;
	return t;
}

void Map::ResetDotNum(int i, int j)
{
	MapInf[i][j].Number = 0;

	return;
}

void Map::GetDotRGB(int i, int j, int & r, int & g, int & b)
{
	r = MapInf[i][j].color.r;
	g = MapInf[i][j].color.g;
	b = MapInf[i][j].color.b;
	return;
}

void Map::DealClick(int i, int j)
{
	//not focus
	if ((Focus.x == -1) && (Focus.y == -1))
	{
		//able for focus
		if (MapInf[i][j].Number > 1)
		{
			SetFocus(i,j);
		}
		else return;
	}
	//focused
	else
	{
		if ((MapInf[Focus.x][Focus.y].Destination.x == i) && (MapInf[Focus.x][Focus.y].Destination.y == j))
		{
			LoseFocus();
		}
		else return;
	}
}

void * Map::GetRoad(int i, int j)
{
	return MapInf[i][j].Road;
}

void Map::SetFocus(int i, int j)
{
	Focus.x = i;
	Focus.y = j;
	return;
}

void Map::LoseFocus()
{
	Focus.x = -1;
	Focus.y = -1;
	return;
}
